host_competence, host_competence_family, host_competence_order)
llista_abundancia <- atlas_data %>%
group_by(atlas_name, family, order) %>%
summarise(abundancia = sum(maxim)) %>%
arrange(-abundancia)
writexl::write_xlsx(llista_abundancia, "Data/Birds_data/Outputs/llista_abundancia.xlsx")
# Reservoirs and non-reservoirs abundance
atlas_data_reservoir_species <- atlas_data %>% filter(host_competence > 0)
atlas_data_non_reservoir_species <- atlas_data %>% filter(host_competence == 0)
# Cell calculations ------------------------------------------------------------
cell_pv <- atlas_data %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance = sum(maxim))
# Cell calculations (reservoir species)
cell_pv_rs <- atlas_data_reservoir_species %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance_rs = sum(maxim),
host_capacity_rs = sum(maxim*host_competence))
cell_pv <- merge(cell_pv, cell_pv_rs, by = "utm_1x1")
# Cell calculations (non-reservoir species)
cell_pv_nrs <- atlas_data_non_reservoir_species %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance_nrs = sum(maxim))
cell_pv <- merge(cell_pv, cell_pv_nrs, by = "utm_1x1")
# The proportion of reservoir species determine amplification and dilution effects
cell_pv$rs_proportion <- (cell_pv$predicted_abundance_rs)/
(cell_pv$predicted_abundance_nrs + cell_pv$predicted_abundance_rs)
write.csv(cell_pv, "Data/Birds_data/Outputs/birds_UTM1x1.csv")
# Host capacity per species ----------------------------------------------------
host_capacity <- atlas_data %>%
filter(!is.na(host_competence)) %>%
group_by(atlas_name, host_competence) %>%
summarise(abundance = sum(maxim)) %>%
group_by(atlas_name, host_competence, abundance) %>%
summarise(host_capacity = host_competence*abundance) %>%
arrange(desc(host_capacity),desc(abundance))
rm(atlas_data_non_reservoir_species, atlas_data_reservoir_species, cell_pv_nrs, cell_pv_rs)
View(cell_pv)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Working with the Atlas data --------------------------------------------------
# Read data
atlas_data <- read_delim("Data/Birds_data/Data/Abundance_data_atlas.csv")
colnames(atlas_data)[colnames(atlas_data) == "latin_name"] <- "atlas_name"
study_area <- read_excel("Data/Birds_data/Data/Study_area.xlsx")
PNAE_birds_WNV <- read_excel("Data/Birds_data/Outputs/PNAE_birds_WNV.xlsx")
correspondencia <- PNAE_birds_WNV %>% dplyr::select(latin_name, old_latin_name)
# Filter by study site (PNAE)
atlas_data <- merge(atlas_data, study_area, by.x = "utm_1x1", by.y = "UTM1X1") %>%
clean_names() %>%
dplyr::select(atlas_name, utm_1x1, zona, minim, maxim) # filter by area
# Fix names
atlas_names <- unique(atlas_data$atlas_name)
atlas_names_df <- as.data.frame(atlas_names)
latin_names <- unique(PNAE_birds_WNV$latin_name)
old_latin_names <- unique(PNAE_birds_WNV$old_latin_name)
result_list <- list()
for(i in 1:nrow(atlas_names_df)) {
atlas_name <- atlas_names_df$atlas_name[i]
# Search for a match in 'old_latin_name'
match_old <- correspondencia[correspondencia$old_latin_name == atlas_name, ]
# Search for a match in 'latin_name'
match_new <- correspondencia[correspondencia$latin_name == atlas_name, ]
# If there is a match in 'old_latin_name'
if(nrow(match_old) > 0) {
result_list[[i]] <- data.frame(
atlas_name = atlas_name,
old_latin_name = match_old$old_latin_name,
latin_name = match_old$latin_name
)
}
# If there is a match in 'latin_name'
else if(nrow(match_new) > 0) {
result_list[[i]] <- data.frame(
atlas_name = atlas_name,
old_latin_name = match_new$old_latin_name,
latin_name = match_new$latin_name
)
}
}
correspondencia <- do.call(rbind, result_list)
rm(atlas_names_df, match_new, match_old, result_list, atlas_name, atlas_names,
latin_names, old_latin_names, i)
PNAE_birds_WNV_atlas <- merge(PNAE_birds_WNV, correspondencia, by = c("latin_name", "old_latin_name")) %>%
dplyr::select(atlas_name, family, order, host_competence, host_competence_family, host_competence_order)
# Add viremia
atlas_data <- merge(atlas_data, PNAE_birds_WNV_atlas, by = c("atlas_name"), all.x = TRUE) %>%
dplyr::select(atlas_name, family, order, utm_1x1, zona, minim, maxim,
host_competence, host_competence_family, host_competence_order)
abundance_ranking <- atlas_data %>%
group_by(atlas_name, family, order) %>%
summarise(abundancia = sum(maxim)) %>%
arrange(-abundancia)
writexl::write_xlsx(abundance_ranking, "Data/Birds_data/Outputs/abundance_ranking.xlsx")
# Reservoirs and non-reservoirs abundance
atlas_data_reservoir_species <- atlas_data %>% filter(host_competence > 0)
atlas_data_non_reservoir_species <- atlas_data %>% filter(host_competence == 0)
# Cell calculations ------------------------------------------------------------
cell_pv <- atlas_data %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance = sum(maxim))
# Cell calculations (reservoir species)
cell_pv_rs <- atlas_data_reservoir_species %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance_rs = sum(maxim),
host_capacity_rs = sum(maxim*host_competence))
cell_pv <- merge(cell_pv, cell_pv_rs, by = "utm_1x1")
# Cell calculations (non-reservoir species)
cell_pv_nrs <- atlas_data_non_reservoir_species %>%
group_by(utm_1x1) %>%
summarise(predicted_abundance_nrs = sum(maxim))
cell_pv <- merge(cell_pv, cell_pv_nrs, by = "utm_1x1")
# The proportion of reservoir species determine amplification and dilution effects
cell_pv$rs_proportion <- (cell_pv$predicted_abundance_rs)/
(cell_pv$predicted_abundance_nrs + cell_pv$predicted_abundance_rs)
write.csv(cell_pv, "Data/Birds_data/Outputs/birds_UTM1x1.csv")
# Host capacity per species ----------------------------------------------------
host_capacity <- atlas_data %>%
filter(!is.na(host_competence)) %>%
group_by(atlas_name, host_competence) %>%
summarise(abundance = sum(maxim)) %>%
group_by(atlas_name, host_competence, abundance) %>%
summarise(host_capacity = host_competence*abundance) %>%
arrange(desc(host_capacity),desc(abundance))
rm(atlas_data_non_reservoir_species, atlas_data_reservoir_species, cell_pv_nrs, cell_pv_rs)
traps <- read_excel("Data/Mosquito_data/traps.xlsx")
View(traps)
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
library(readxl)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(lubridate)
library(janitor)
library(vegan)
library(factoextra)
library(tibble)
library(MASS)
library(svglite)
library(pracma)
library(zoo)
library(ggthemes)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds.xlsx") %>%
clean_names()
unique(viremia_experiments$species)
View(PNAE_birds)
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer, titer_interpolated)
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer)
unique(viremia_experiments_PNAE$species)
View(viremia_experiments_PNAE)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds.xlsx") %>%
clean_names()
# Editing
viremia_experiments$day <- as.numeric(viremia_experiments$day)
viremia_experiments <- viremia_experiments %>%
filter(!is.na(day)) %>%
group_by(curve) %>%
mutate(
individuals_tested = max(sample_size_original),
survival = min(sample_size_survival)/max(sample_size_original)) %>%
dplyr::select(species, host_family, host_order, country, wnv_strain, virus_genotype, virus_dose,
curve, individuals_tested, survival, day, titer) %>%
arrange(curve, day)
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer)
View(viremia_experiments_PNAE)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds.xlsx") %>%
clean_names()
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer)
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name))
View(viremia_experiments_PNAE)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds.xlsx") %>%
clean_names()
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(-x20, -x21, -x22)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds.xlsx") %>%
clean_names()
# Dataframe of viremia experiments filtering PNAE species
viremia_experiments_PNAE <- viremia_experiments %>%
filter(species %in% c(PNAE_birds$latin_name)) %>%
dplyr::select(-x20, -x21, -x22)
View(viremia_experiments_PNAE)
View(viremia_experiments_PNAE)
writexl::write_xlsx(viremia_experiments_PNAE, "Data/Birds_data/Data/Review_experimental_infections_birds_PNAE.xlsx")
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds_PNAE.xlsx") %>%
clean_names()
# Editing
viremia_experiments$day <- as.numeric(viremia_experiments$day)
viremia_experiments <- viremia_experiments %>%
filter(!is.na(day)) %>%
group_by(curve) %>%
mutate(
individuals_tested = max(sample_size_original),
survival = min(sample_size_survival)/max(sample_size_original)) %>%
dplyr::select(species, host_family, host_order, country, wnv_strain, virus_genotype, virus_dose,
curve, individuals_tested, survival, day, titer) %>%
arrange(curve, day)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds_PNAE.xlsx") %>%
clean_names()
View(PNAE_birds)
View(viremia_experiments)
# Editing
viremia_experiments$day <- as.numeric(viremia_experiments$day)
viremia_experiments <- viremia_experiments %>%
filter(!is.na(day)) %>%
group_by(curve) %>%
mutate(
individuals_tested = max(sample_size_original),
survival = min(sample_size_survival)/max(sample_size_original)) %>%
dplyr::select(species, host_family, host_order, country, wnv_strain, virus_genotype, virus_dose,
curve, individuals_tested, survival, day, titer) %>%
arrange(curve, day)
# Add day 0
viremia_experiments <- viremia_experiments %>%
group_by(curve) %>%
arrange(curve, day) %>%
slice(1) %>% # Take the first row of each group (first day)
mutate(day = 0, titer = 0) %>% # Change the day to 0 and the titer to 0
bind_rows(viremia_experiments) %>% # Combine with the original dataframe
arrange(curve, day)
# NAs interpolation
viremia_experiments <- viremia_experiments %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
# NAs interpolation
viremia_experiments <- viremia_experiments %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer, titer_interpolated)
View(viremia_experiments)
# Function to calculate AUC for titer values above 5 PFU
calculate_auc <- function(df, threshold = 5) {
# Adjust all titer values: if below threshold, set to threshold
df_adjusted <- df %>% mutate(titer_adjusted = pmax(titer_interpolated, threshold))
# Calculate the AUC using adjusted titer values
return(trapz(df_adjusted$day, df_adjusted$titer_adjusted - threshold))
}
# Average curves per species/family/order and day + NAs interpolation
curves_species <- viremia_experiments_PNAE %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(species, host_family, host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
curves_family <- viremia_experiments_PNAE %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(host_family, host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
curves_order <- viremia_experiments_PNAE %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
# Apply function to species/family/order curves
auc_species <- curves_species %>%
group_by(species, host_family, host_order) %>%
summarise(host_competence = calculate_auc(cur_data()), .groups = 'drop')
auc_family <- curves_family %>%
group_by(host_family, host_order) %>%
summarise(host_competence_family = calculate_auc(cur_data()), .groups = 'drop')
auc_order <- curves_order %>%
group_by(host_order) %>%
summarise(host_competence_order = calculate_auc(cur_data()), .groups = 'drop')
# Merge with PNAE list
auc_species$species_2 <- auc_species$species
PNAE_birds_WNV <- merge(PNAE_birds, auc_species,
by.x = c("latin_name", "old_latin_name", "family", "order"),
by.y = c("species", "species_2", "host_family", "host_order"),
all.x = TRUE)
PNAE_birds_WNV <- merge(PNAE_birds_WNV, auc_family,
by.x = c("family", "order"), by.y = c("host_family", "host_order"),
all.x = TRUE)
PNAE_birds_WNV <- merge(PNAE_birds_WNV, auc_order,
by.x = c("order"), by.y = c("host_order"),
all.x = TRUE)
PNAE_birds_WNV <- PNAE_birds_WNV %>%
dplyr::select(latin_name, old_latin_name, family, order,
host_competence, host_competence_family, host_competence_order)
# Delete all variables.
rm(list = ls())
# Set working directory
setwd("/home/julia/Documentos/PhD/Data_analysis/PNAE")
# Average curve per species and subsequent AUC calculation ---------------------
# Read data
PNAE_birds <- read_excel("Data/Birds_data/Data/PNAE_birds.xlsx") %>%
dplyr::select(latin_name, old_latin_name, family, order)
viremia_experiments <- read_excel("Data/Birds_data/Data/Review_experimental_infections_birds_PNAE.xlsx") %>%
clean_names()
# Editing
viremia_experiments$day <- as.numeric(viremia_experiments$day)
viremia_experiments <- viremia_experiments %>%
filter(!is.na(day)) %>%
group_by(curve) %>%
mutate(
individuals_tested = max(sample_size_original),
survival = min(sample_size_survival)/max(sample_size_original)) %>%
dplyr::select(species, host_family, host_order, country, wnv_strain, virus_genotype, virus_dose,
curve, individuals_tested, survival, day, titer) %>%
arrange(curve, day)
# Add day 0
viremia_experiments <- viremia_experiments %>%
group_by(curve) %>%
arrange(curve, day) %>%
slice(1) %>% # Take the first row of each group (first day)
mutate(day = 0, titer = 0) %>% # Change the day to 0 and the titer to 0
bind_rows(viremia_experiments) %>% # Combine with the original dataframe
arrange(curve, day)
# NAs interpolation
viremia_experiments <- viremia_experiments %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated)) %>%
dplyr::select(curve, species, host_family, host_order, day, titer, titer_interpolated)
# Function to calculate AUC for titer values above 5 PFU
calculate_auc <- function(df, threshold = 5) {
# Adjust all titer values: if below threshold, set to threshold
df_adjusted <- df %>% mutate(titer_adjusted = pmax(titer_interpolated, threshold))
# Calculate the AUC using adjusted titer values
return(trapz(df_adjusted$day, df_adjusted$titer_adjusted - threshold))
}
# Average curves per species/family/order and day + NAs interpolation
curves_species <- viremia_experiments %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(species, host_family, host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
curves_family <- viremia_experiments %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(host_family, host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
curves_order <- viremia_experiments %>%
dplyr::select(curve, species, host_family, host_order, day, titer) %>%
group_by(host_order, day) %>%
summarise(titer = if_else(all(is.na(titer)), NA_real_, mean(titer, na.rm = TRUE))) %>%
mutate(titer_interpolated = na.approx(titer, day, na.rm = FALSE)) %>%
filter(!is.na(titer_interpolated))
# Apply function to species/family/order curves
auc_species <- curves_species %>%
group_by(species, host_family, host_order) %>%
summarise(host_competence = calculate_auc(cur_data()), .groups = 'drop')
auc_family <- curves_family %>%
group_by(host_family, host_order) %>%
summarise(host_competence_family = calculate_auc(cur_data()), .groups = 'drop')
auc_order <- curves_order %>%
group_by(host_order) %>%
summarise(host_competence_order = calculate_auc(cur_data()), .groups = 'drop')
# Merge with PNAE list
auc_species$species_2 <- auc_species$species
PNAE_birds_WNV <- merge(PNAE_birds, auc_species,
by.x = c("latin_name", "old_latin_name", "family", "order"),
by.y = c("species", "species_2", "host_family", "host_order"),
all.x = TRUE)
PNAE_birds_WNV <- merge(PNAE_birds_WNV, auc_family,
by.x = c("family", "order"), by.y = c("host_family", "host_order"),
all.x = TRUE)
PNAE_birds_WNV <- merge(PNAE_birds_WNV, auc_order,
by.x = c("order"), by.y = c("host_order"),
all.x = TRUE)
PNAE_birds_WNV <- PNAE_birds_WNV %>%
dplyr::select(latin_name, old_latin_name, family, order,
host_competence, host_competence_family, host_competence_order)
View(PNAE_birds_WNV)
# Plots ------------------------------------------------------------------------
# Plot 1: mean curves by family
# Calculate the maximum value of titer_interpolated for each host_family
family_max_titer <- curves_family %>%
group_by(host_family) %>%
summarise(max_titer = max(titer_interpolated, na.rm = TRUE)) %>%
arrange(desc(max_titer))
# Reorder levels of host_family factor based on max_titer values
curves_family <- curves_family %>%
mutate(host_family = factor(host_family, levels = family_max_titer$host_family))
# Create the plot
mean_curves_family_plot <- curves_family %>%
filter(!day %in% c("8", "9", "10")) %>%
ggplot(aes(x = day, y = titer_interpolated, color = host_family)) +
geom_line() +
geom_point(size = 1) +
geom_hline(yintercept = 5, linetype = "dashed", color = "black", size = 0.5) +  # Horizontal line at threshold (y = 5)
scale_x_continuous(breaks = seq(0, max(curves_family$day, na.rm = TRUE), by = 1)) +
labs(title = "Viremia Levels by Family",
x = "Day postinfection",
y = "Log PFU/ml serum",
color = "Family") +
theme_minimal() +
theme(legend.position = "right") # Adjust legend position if necessary
mean_curves_family_plot
# Plot 2: mean curves by order
# Calculate the maximum value of titer_interpolated for each host_order
order_max_titer <- curves_order %>%
group_by(host_order) %>%
summarise(max_titer = max(titer_interpolated, na.rm = TRUE)) %>%
arrange(desc(max_titer))
# Reorder levels of host_order factor based on max_titer values
curves_order <- curves_order %>%
mutate(host_order = factor(host_order, levels = order_max_titer$host_order))
# Create the plot
mean_curves_order_plot <- curves_order %>%
filter(!day %in% c("8", "9", "10")) %>%
ggplot(aes(x = day, y = titer_interpolated, color = host_order)) +
geom_line() +
geom_point(size = 1) +
geom_hline(yintercept = 5, linetype = "dashed", color = "black", size = 0.5) +  # Horizontal line at threshold (y = 5)
scale_x_continuous(breaks = seq(0, max(curves_order$day, na.rm = TRUE), by = 1)) +
labs(title = "Viremia Levels by Order",
x = "Day postinfection",
y = "Log PFU/ml serum",
color = "Order") +
theme_minimal() +
theme(legend.position = "right") # Adjust legend position if necessary
mean_curves_order_plot
# Plot 3: experiments + average curves per species
# Preparing dataframe
curves_species$curve <- "mean"
curves_species <- curves_species %>%
dplyr::select(curve, species, host_family, host_order, day, titer, titer_interpolated)
viremia_experiments$curve <- as.character(viremia_experiments$curve)
viremia_experiments <- rbind(viremia_experiments, curves_species)
# Plot
species_curves_plot <- viremia_experiments %>%
ggplot(aes(x = day, y = titer_interpolated, group = curve, color = ifelse(curve == "mean", "mean", "experiment"))) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "red", size = 0.5) +
scale_x_continuous(breaks = seq(0, 10, by = 1), limits = c(0, 10)) +
scale_y_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 10)) +
scale_color_manual(values = c("mean" = "black", "experiment" = "darkolivegreen3")) +
facet_wrap(~species, scales = "free") +
labs(
# title = "Experiments and Average Viremia Curves per Species",
x = "Day postinfection",
y = "Log PFU/ml serum") +
theme_bw() +
theme(legend.position = "none",
strip.text = element_text(face = "italic", size = 10),
axis.text = element_text(size = 10),
axis.title = element_text(size = 11),
panel.grid.major = element_line(color = "grey90", size = 0.5),
panel.grid.minor = element_blank())
species_curves_plot
